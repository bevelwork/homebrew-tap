name: Check sources for new releases

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: "17 5 * * *" # Daily at 05:17 UTC

# Required permissions:
# - contents: write (to create branches, push commits, modify files)
# - pull-requests: write (to create and merge pull requests)
# Token requirements: GITHUB_TOKEN (default) with repo scope
permissions:
  contents: write
  pull-requests: write

jobs:
  bump:
    name: Update quick-ssm formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Get latest release from upstream
        id: get_release
        run: |
          # Get latest release info from GitHub API
          RELEASE_INFO=$(curl -s https://api.github.com/repos/bevelwork/quick_ssm/releases/latest)
          VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name' | sed 's/^v//')
          # Construct the exact archive URL used in the formula
          ARCHIVE_URL="https://github.com/bevelwork/quick_ssm/archive/refs/tags/${VERSION}.tar.gz"
          
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "archive_url=$ARCHIVE_URL" >> "$GITHUB_OUTPUT"
          echo "Latest version: $VERSION"

      - name: Download and calculate SHA256
        id: calc_sha
        run: |
          # Download the tarball and calculate SHA256
          curl -L -o /tmp/quick_ssm.tar.gz "${{ steps.get_release.outputs.archive_url }}"
          SHA256=$(sha256sum /tmp/quick_ssm.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
          echo "SHA256: $SHA256"

      - name: Update formula
        run: |
          VERSION="${{ steps.get_release.outputs.version }}"
          SHA256="${{ steps.calc_sha.outputs.sha256 }}"
          
          # Update the formula file
          sed -i "s|url \".*\"|url \"https://github.com/bevelwork/quick_ssm/archive/refs/tags/${VERSION}.tar.gz\"|" Formula/quick-ssm.rb
          sed -i "s|sha256 \".*\"|sha256 \"${SHA256}\"|" Formula/quick-ssm.rb
          
          echo "Updated formula:"
          cat Formula/quick-ssm.rb

      - name: Check if changes exist
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes needed"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create pull request
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create unique branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="bump-quick-ssm-${{ steps.get_release.outputs.version }}-$TIMESTAMP"
          git checkout -b "$BRANCH_NAME"
          git add Formula/quick-ssm.rb
          git commit -m "Bump quick-ssm to ${{ steps.get_release.outputs.version }}"
          
          # Push branch (force push to handle existing branches)
          git push origin "$BRANCH_NAME" --force
          
          # Create PR using GitHub CLI
          PR_URL=$(gh pr create \
            --title "Bump quick-ssm to ${{ steps.get_release.outputs.version }}" \
            --body "Automated update of quick-ssm formula to version ${{ steps.get_release.outputs.version }}" \
            --base main \
            --head "$BRANCH_NAME")
          
          echo "Created PR: $PR_URL"
          
          # Extract PR number from URL
          PR_NUMBER=$(echo "$PR_URL" | grep -o '/pull/[0-9]*' | grep -o '[0-9]*')
          
          # Wait a moment for PR to be fully created
          sleep 5
          
          # Merge the PR
          gh pr merge "$PR_NUMBER" \
            --merge \
            --delete-branch \
            --body "Automatically merged by GitHub Actions"
          
          echo "Successfully merged PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}


  bump_quick_pipreqs:
    name: Update quick-pipreqs formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Get latest release from upstream
        id: get_release
        run: |
          # Get latest release info from GitHub API
          RELEASE_INFO=$(curl -s https://api.github.com/repos/bevelwork/quick_pipreqs/releases/latest)
          VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name' | sed 's/^v//')
          # Construct the exact archive URL used in the formula
          ARCHIVE_URL="https://github.com/bevelwork/quick_pipreqs/archive/refs/tags/${VERSION}.tar.gz"
          
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "archive_url=$ARCHIVE_URL" >> "$GITHUB_OUTPUT"
          echo "Latest version: $VERSION"

      - name: Download and calculate SHA256
        id: calc_sha
        run: |
          # Download the tarball and calculate SHA256
          curl -L -o /tmp/quick_pipreqs.tar.gz "${{ steps.get_release.outputs.archive_url }}"
          SHA256=$(sha256sum /tmp/quick_pipreqs.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
          echo "SHA256: $SHA256"

      - name: Update formula
        run: |
          VERSION="${{ steps.get_release.outputs.version }}"
          SHA256="${{ steps.calc_sha.outputs.sha256 }}"
          
          # Update the formula file
          sed -i "s|url \".*\"|url \"https://github.com/bevelwork/quick_pipreqs/archive/refs/tags/${VERSION}.tar.gz\"|" Formula/quick-pipreqs.rb
          sed -i "s|sha256 \".*\"|sha256 \"${SHA256}\"|" Formula/quick-pipreqs.rb
          
          echo "Updated formula:"
          cat Formula/quick-ssm.rb

      - name: Check if changes exist
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes needed"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create pull request
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create unique branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME="bump-quick-pipreqs-${{ steps.get_release.outputs.version }}-$TIMESTAMP"
          git checkout -b "$BRANCH_NAME"
          git add Formula/quick-pipreqs.rb
          git commit -m "Bump quick-pipreqs to ${{ steps.get_release.outputs.version }}"
          
          # Push branch (force push to handle existing branches)
          git push origin "$BRANCH_NAME" --force
          
          # Create PR using GitHub CLI
          PR_URL=$(gh pr create \
            --title "Bump quick-pipreqs to ${{ steps.get_release.outputs.version }}" \
            --body "Automated update of quick-pipreqs formula to version ${{ steps.get_release.outputs.version }}" \
            --base main \
            --head "$BRANCH_NAME")
          
          echo "Created PR: $PR_URL"
          
          # Extract PR number from URL
          PR_NUMBER=$(echo "$PR_URL" | grep -o '/pull/[0-9]*' | grep -o '[0-9]*')
          
          # Wait a moment for PR to be fully created
          sleep 5
          
          # Merge the PR
          gh pr merge "$PR_NUMBER" \
            --merge \
            --delete-branch \
            --body "Automatically merged by GitHub Actions"
          
          echo "Successfully merged PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}


  bump_quick_ecs:
    name: Update quick-ecs formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Get latest release from upstream
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/bevelwork/quick_ecs/releases/latest)
          VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          ARCHIVE_URL="https://github.com/bevelwork/quick_ecs/archive/refs/tags/${VERSION}.tar.gz"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "archive_url=$ARCHIVE_URL" >> "$GITHUB_OUTPUT"
          echo "Latest version: $VERSION"

      - name: Download and calculate SHA256
        id: calc_sha
        run: |
          curl -L -o /tmp/quick_ecs.tar.gz "${{ steps.get_release.outputs.archive_url }}"
          SHA256=$(sha256sum /tmp/quick_ecs.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
          echo "SHA256: $SHA256"

      - name: Update formula
        run: |
          VERSION="${{ steps.get_release.outputs.version }}"
          SHA256="${{ steps.calc_sha.outputs.sha256 }}"

          FILE=Formula/quick-ecs.rb
          URL_LINE="  url \"https://github.com/bevelwork/quick_ecs/archive/refs/tags/${VERSION}.tar.gz\""
          SHA_LINE="  sha256 \"${SHA256}\""

          if grep -q '^\s*url\s*"https://github.com/bevelwork/quick_ecs' "$FILE"; then
            sed -i "s|^\s*url\s*\"https://github.com/bevelwork/quick_ecs.*|$URL_LINE|" "$FILE"
          else
            awk -v u="$URL_LINE" '1; NR==6{print u}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi

          if grep -q '^\s*sha256\s*"' "$FILE"; then
            sed -i "s|^\s*sha256\s*\".*\"|$SHA_LINE|" "$FILE"
          else
            awk -v s="$SHA_LINE" '1; /url \\"https:\\/\\/github.com\\/bevelwork\\/quick_ecs/{print s}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi

          echo "Updated formula:"
          cat "$FILE"

      - name: Check if changes exist
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes needed"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create pull request
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          CLEAN_TAG=$(echo "${{ steps.get_release.outputs.version }}" | sed 's/^v//')
          BRANCH_NAME="bump-quick-ecs-${CLEAN_TAG}-$TIMESTAMP"
          git checkout -b "$BRANCH_NAME"
          git add Formula/quick-ecs.rb
          git commit -m "Bump quick-ecs to ${{ steps.get_release.outputs.version }}"
          git push origin "$BRANCH_NAME" --force
          PR_URL=$(gh pr create \
            --title "Bump quick-ecs to ${{ steps.get_release.outputs.version }}" \
            --body "Automated update of quick-ecs formula to version ${{ steps.get_release.outputs.version }}" \
            --base main \
            --head "$BRANCH_NAME")
          echo "Created PR: $PR_URL"
          PR_NUMBER=$(echo "$PR_URL" | grep -o '/pull/[0-9]*' | grep -o '[0-9]*')
          sleep 5
          gh pr merge "$PR_NUMBER" \
            --merge \
            --delete-branch \
            --body "Automatically merged by GitHub Actions"
          echo "Successfully merged PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}

  bump_quick_tag:
    name: Update quick-tag formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Get latest release from upstream
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/bevelwork/quick_tag/releases/latest)
          VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          ARCHIVE_URL="https://github.com/bevelwork/quick_tag/archive/refs/tags/${VERSION}.tar.gz"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "archive_url=$ARCHIVE_URL" >> "$GITHUB_OUTPUT"
          echo "Latest version: $VERSION"

      - name: Download and calculate SHA256
        id: calc_sha
        run: |
          curl -L -o /tmp/quick_tag.tar.gz "${{ steps.get_release.outputs.archive_url }}"
          SHA256=$(sha256sum /tmp/quick_tag.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
          echo "SHA256: $SHA256"

      - name: Update formula
        run: |
          VERSION="${{ steps.get_release.outputs.version }}"
          SHA256="${{ steps.calc_sha.outputs.sha256 }}"

          FILE=Formula/quick-tag.rb
          URL_LINE="  url \"https://github.com/bevelwork/quick_tag/archive/refs/tags/${VERSION}.tar.gz\""
          SHA_LINE="  sha256 \"${SHA256}\""

          if grep -q '^\s*url\s*"https://github.com/bevelwork/quick_tag' "$FILE"; then
            sed -i "s|^\s*url\s*\"https://github.com/bevelwork/quick_tag.*|$URL_LINE|" "$FILE"
          else
            awk -v u="$URL_LINE" '1; NR==6{print u}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi

          if grep -q '^\s*sha256\s*"' "$FILE"; then
            sed -i "s|^\s*sha256\s*\".*\"|$SHA_LINE|" "$FILE"
          else
            awk -v s="$SHA_LINE" '1; /url \\"https:\\/\\/github.com\\/bevelwork\\/quick_tag/{print s}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi

          echo "Updated formula:"
          cat "$FILE"

      - name: Check if changes exist
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes needed"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create pull request
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          CLEAN_TAG=$(echo "${{ steps.get_release.outputs.version }}" | sed 's/^v//')
          BRANCH_NAME="bump-quick-tag-${CLEAN_TAG}-$TIMESTAMP"
          git checkout -b "$BRANCH_NAME"
          git add Formula/quick-tag.rb
          git commit -m "Bump quick-tag to ${{ steps.get_release.outputs.version }}"
          git push origin "$BRANCH_NAME" --force
          PR_URL=$(gh pr create \
            --title "Bump quick-tag to ${{ steps.get_release.outputs.version }}" \
            --body "Automated update of quick-tag formula to version ${{ steps.get_release.outputs.version }}" \
            --base main \
            --head "$BRANCH_NAME")
          echo "Created PR: $PR_URL"
          PR_NUMBER=$(echo "$PR_URL" | grep -o '/pull/[0-9]*' | grep -o '[0-9]*')
          sleep 5
          gh pr merge "$PR_NUMBER" \
            --merge \
            --delete-branch \
            --body "Automatically merged by GitHub Actions"
          echo "Successfully merged PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}

  bump_quick_nats_are_bad:
    name: Update quick-nats-are-bad formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Get latest release from upstream
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/bevelwork/quick_nats_are_bad/releases/latest)
          VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          ARCHIVE_URL="https://github.com/bevelwork/quick_nats_are_bad/archive/refs/tags/${VERSION}.tar.gz"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "archive_url=$ARCHIVE_URL" >> "$GITHUB_OUTPUT"
          echo "Latest version: $VERSION"

      - name: Download and calculate SHA256
        id: calc_sha
        run: |
          curl -L -o /tmp/quick_nats_are_bad.tar.gz "${{ steps.get_release.outputs.archive_url }}"
          SHA256=$(sha256sum /tmp/quick_nats_are_bad.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
          echo "SHA256: $SHA256"

      - name: Update formula
        run: |
          VERSION="${{ steps.get_release.outputs.version }}"
          SHA256="${{ steps.calc_sha.outputs.sha256 }}"

          FILE=Formula/quick-nats-are-bad.rb
          URL_LINE="  url \"https://github.com/bevelwork/quick_nats_are_bad/archive/refs/tags/${VERSION}.tar.gz\""
          SHA_LINE="  sha256 \"${SHA256}\""

          if grep -q '^\s*url\s*"https://github.com/bevelwork/quick_nats_are_bad' "$FILE"; then
            sed -i "s|^\s*url\s*\"https://github.com/bevelwork/quick_nats_are_bad.*|$URL_LINE|" "$FILE"
          else
            awk -v u="$URL_LINE" '1; NR==6{print u}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi

          if grep -q '^\s*sha256\s*"' "$FILE"; then
            sed -i "s|^\s*sha256\s*\".*\"|$SHA_LINE|" "$FILE"
          else
            awk -v s="$SHA_LINE" '1; /url \\"https:\\/\\/github.com\\/bevelwork\\/quick_nats_are_bad/{print s}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi

          echo "Updated formula:"
          cat "$FILE"

      - name: Check if changes exist
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes needed"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create pull request
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          CLEAN_TAG=$(echo "${{ steps.get_release.outputs.version }}" | sed 's/^v//')
          BRANCH_NAME="bump-quick-nats-are-bad-${CLEAN_TAG}-$TIMESTAMP"
          git checkout -b "$BRANCH_NAME"
          git add Formula/quick-nats-are-bad.rb
          git commit -m "Bump quick-nats-are-bad to ${{ steps.get_release.outputs.version }}"
          git push origin "$BRANCH_NAME" --force
          PR_URL=$(gh pr create \
            --title "Bump quick-nats-are-bad to ${{ steps.get_release.outputs.version }}" \
            --body "Automated update of quick-nats-are-bad formula to version ${{ steps.get_release.outputs.version }}" \
            --base main \
            --head "$BRANCH_NAME")
          echo "Created PR: $PR_URL"
          PR_NUMBER=$(echo "$PR_URL" | grep -o '/pull/[0-9]*' | grep -o '[0-9]*')
          sleep 5
          gh pr merge "$PR_NUMBER" \
            --merge \
            --delete-branch \
            --body "Automatically merged by GitHub Actions"
          echo "Successfully merged PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}

  bump_quick_time:
    name: Update quick-time formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Get latest release from upstream
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/bevelwork/quick_time/releases/latest)
          VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          ARCHIVE_URL="https://github.com/bevelwork/quick_time/archive/refs/tags/${VERSION}.tar.gz"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "archive_url=$ARCHIVE_URL" >> "$GITHUB_OUTPUT"
          echo "Latest version: $VERSION"

      - name: Download and calculate SHA256
        id: calc_sha
        run: |
          curl -L -o /tmp/quick_time.tar.gz "${{ steps.get_release.outputs.archive_url }}"
          SHA256=$(sha256sum /tmp/quick_time.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
          echo "SHA256: $SHA256"

      - name: Update formula
        run: |
          VERSION="${{ steps.get_release.outputs.version }}"
          SHA256="${{ steps.calc_sha.outputs.sha256 }}"

          FILE=Formula/quick-time.rb
          URL_LINE="  url \"https://github.com/bevelwork/quick_time/archive/refs/tags/${VERSION}.tar.gz\""
          SHA_LINE="  sha256 \"${SHA256}\""

          if grep -q '^\s*url\s*"https://github.com/bevelwork/quick_time' "$FILE"; then
            sed -i "s|^\s*url\s*\"https://github.com/bevelwork/quick_time.*|$URL_LINE|" "$FILE"
          else
            awk -v u="$URL_LINE" '1; NR==6{print u}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi

          if grep -q '^\s*sha256\s*"' "$FILE"; then
            sed -i "s|^\s*sha256\s*\".*\"|$SHA_LINE|" "$FILE"
          else
            awk -v s="$SHA_LINE" '1; /url \\"https:\\/\\/github.com\\/bevelwork\\/quick_time/{print s}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          fi

          echo "Updated formula:"
          cat "$FILE"

      - name: Check if changes exist
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes needed"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create pull request
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          CLEAN_TAG=$(echo "${{ steps.get_release.outputs.version }}" | sed 's/^v//')
          BRANCH_NAME="bump-quick-time-${CLEAN_TAG}-$TIMESTAMP"
          git checkout -b "$BRANCH_NAME"
          git add Formula/quick-time.rb
          git commit -m "Bump quick-time to ${{ steps.get_release.outputs.version }}"
          git push origin "$BRANCH_NAME" --force
          PR_URL=$(gh pr create \
            --title "Bump quick-time to ${{ steps.get_release.outputs.version }}" \
            --body "Automated update of quick-time formula to version ${{ steps.get_release.outputs.version }}" \
            --base main \
            --head "$BRANCH_NAME")
          echo "Created PR: $PR_URL"
          PR_NUMBER=$(echo "$PR_URL" | grep -o '/pull/[0-9]*' | grep -o '[0-9]*')
          sleep 5
          gh pr merge "$PR_NUMBER" \
            --merge \
            --delete-branch \
            --body "Automatically merged by GitHub Actions"
          echo "Successfully merged PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}
